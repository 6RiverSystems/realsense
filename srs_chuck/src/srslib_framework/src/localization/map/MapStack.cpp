#include <srslib_framework/localization/map/MapStack.hpp>

namespace srs {

////////////////////////////////////////////////////////////////////////////////////////////////////
// Public methods

////////////////////////////////////////////////////////////////////////////////////////////////////
MapStack::MapStack(LogicalMap* logical, OccupancyMap* occupancy, costmap_2d::Costmap2D* costMap2d) :
    logical_(logical),
    occupancy_(occupancy),
    costMap2d_(costMap2d)
{
}

////////////////////////////////////////////////////////////////////////////////////////////////////
MapStack::~MapStack()
{
    delete logical_;
    delete occupancy_;
}

////////////////////////////////////////////////////////////////////////////////////////////////////
costmap_2d::Costmap2D* MapStack::getCostMap2d() const
{
    return costMap2d_;
}

////////////////////////////////////////////////////////////////////////////////////////////////////
LogicalMap* MapStack::getLogicalMap() const
{
    return logical_;
}

////////////////////////////////////////////////////////////////////////////////////////////////////
bool MapStack::getNeighbor(const Grid2d::Position& position, Grid2d::Position& result) const
{
    return logical_->getGrid()->getNeighbor(position, result);
}

////////////////////////////////////////////////////////////////////////////////////////////////////
OccupancyMap* MapStack::getOccupancyMap() const
{
    return occupancy_;
}

////////////////////////////////////////////////////////////////////////////////////////////////////
int MapStack::getTotalCost(const Grid2d::Position& position) const
{
    int cost = 0;

    if (logical_)
    {
        logical_->getGrid()->getPayload(position);
    }

    if (costMap2d_)
    {
        cost += costMap2d_->getCost(position.x, position.y);
    }

    return cost;
}

////////////////////////////////////////////////////////////////////////////////////////////////////
Grid2d::BaseType MapStack::getWeight(const Grid2d::Position& position) const
{
    return logical_->getGrid()->getWeight(position);
}

////////////////////////////////////////////////////////////////////////////////////////////////////
// Private methods
//

////////////////////////////////////////////////////////////////////////////////////////////////////
// Global operators

} // namespace srs
