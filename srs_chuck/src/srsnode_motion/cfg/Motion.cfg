#!/usr/bin/env python

PACKAGE='srsnode_motion'

from dynamic_reconfigure.parameter_generator_catkin import *

gen = ParameterGenerator()

####################################################################################################
gen.add("custom_action_enabled", 
        bool_t, 0,
        "Enable/disable the development custom action [true/false]" , 
        False
)

####################################################################################################
# Emergency motion controller
#
gen.add("controller_emergency_kv", 
        double_t, 0,
        "Emergency Controller: linear velocity gain []" , 
        1.00,
        0.0, 10.00
)

gen.add("controller_emergency_kw", 
        double_t, 0,
        "Emergency Controller: angular velocity gain []" , 
        1.00,
        0.0, 10.00
)

gen.add("controller_emergency_max_angular_velocity", 
        double_t, 0,
        "Emergency Controller: maximum angular velocity in emergency mode [rad/s]" , 
        0.1500,
        0.0, 10.00
)

gen.add("controller_emergency_max_linear_velocity", 
        double_t, 0,
        "Emergency Controller: maximum linear velocity in emergency mode [m/s]" , 
        0.0800,
        0.0, 3.00
)

####################################################################################################
gen.add("controller_manual_kv", 
        double_t, 0,
        "Manual Controller: linear velocity gain []" , 
        1.00,
        0.0, 10.00
)

gen.add("controller_manual_kw", 
        double_t, 0,
        "Manual Controller: angular velocity gain []" , 
        1.00,
        0.0, 10.00
)

gen.add("controller_manual_max_angular_velocity", 
        double_t, 0,
        "Manual Controller: maximum angular velocity in manual mode [rad/s]" , 
        0.2500,
        0.0, 10.00
)

gen.add("controller_manual_max_linear_velocity", 
        double_t, 0,
        "Manual Controller: maximum linear velocity in manual mode [m/s]" , 
        0.4000,
        0.0, 3.00
)

####################################################################################################
gen.add("physical_max_angular_acceleration", 
        double_t, 0,
        "Maximum physical angular acceleration [rad/s^2]" , 
        2.6180,
        0.001, 3.000
)

gen.add("physical_max_angular_velocity", 
        double_t, 0,
        "Maximum physical angular velocity [rad/s]" , 
        9.6870,
        0.001, 10.000
)

gen.add("physical_max_linear_acceleration", 
        double_t, 0,
        "Maximum physical linear acceleration [m/s^2]" , 
        0.7000,
        0.001, 1.000
)

gen.add("physical_max_linear_velocity", 
        double_t, 0,
        "Maximum physical linear velocity [m/s]" , 
        2.6000,
        0.001, 3.000
)

gen.add("physical_min_angular_velocity", 
        double_t, 0,
        "Minimum physical angular velocity [rad/s]" , 
        0.0008,
        0.0001, 0.010
)

gen.add("physical_min_linear_velocity", 
        double_t, 0,
        "Minimum physical linear velocity [m/s]" , 
        0.0050,
        0.001, 0.100
)

####################################################################################################
gen.add("controller_pathfollow_adaptive_lookahead_enabled", 
        bool_t, 0,
        "Path-follow Controller: adaptive look-ahead enabled [t/f]" , 
        False
)

gen.add("controller_pathfollow_goal_reached_distance", 
        double_t, 0,
        "Path-follow Controller: distance used to check if the goal was reached [m]" , 
        0.025,
        0.001, 1.000
)

gen.add("controller_pathfollow_kv", 
        double_t, 0,
        "Path-follow Controller: linear velocity gain []" , 
        1.00,
        0.0, 10.00
)

gen.add("controller_pathfollow_kw", 
        double_t, 0,
        "Path-follow Controller: angular velocity gain []" , 
        1.00,
        0.0, 10.00
)

gen.add("controller_pathfollow_landing_depth", 
        double_t, 0,
        "Path-follow Controller: depth of the landing zone [m]" , 
        0.800,
        0.001, 3.000
)

gen.add("controller_pathfollow_landing_width", 
        double_t, 0,
        "Path-follow Controller: width of the landing zone [m]" , 
        0.800,
        0.001, 3.000
)

gen.add("controller_pathfollow_linear_acceleration", 
        double_t, 0,
        "Path-follow Controller: linear acceleration [m/s^2]" , 
        0.2500,
        0.001, 1.000
)

gen.add("controller_pathfollow_max_angular_velocity", 
        double_t, 0,
        "Path-follow Controller: maximum angular velocity [rad/s]" , 
        0.7000,
        0.001, 3.000
)

gen.add("controller_pathfollow_max_linear_velocity", 
        double_t, 0,
        "Path-follow Controller: maximum linear velocity [m/s]" , 
        1.0000,
        0.001, 3.000
)

gen.add("controller_pathfollow_max_look_ahead_distance", 
        double_t, 0,
        "Path-follow Controller: maximum motion controller look-ahead distance [m]" , 
        1.100,
        0.001, 3.000
)

gen.add("controller_pathfollow_min_linear_velocity", 
        double_t, 0,
        "Path-follow Controller: minimum travel linear velocity during motion [m/s]" , 
        0.0050,
        0.001, 3.000
)

gen.add("controller_pathfollow_min_look_ahead_distance", 
        double_t, 0,
        "Path-follow Controller: minimum motion controller look-ahead distance [m]" , 
        0.500,
        0.001, 3.000
)

gen.add("controller_pathfollow_small_straight_distance", 
        double_t, 0,
        "Path-follow Controller: straight distance that is considered small [m]" , 
        3.000,
        0.001, 5.000
)

gen.add("controller_pathfollow_turning_linear_velocity", 
        double_t, 0,
        "Path-follow Controller: travel linear velocity during turns [m/s]" , 
        0.3000,
        0.001, 3.000
)

gen.add("controller_pathfollow_turning_zone_radius", 
        double_t, 0,
        "Path-follow Controller: travel reduced velocity radius during turns [m]" , 
        0.500,
        0.001, 3.000
)

gen.add("controller_pathfollow_zero_look_ahead_distance", 
        double_t, 0,
        "Path-follow Controller: zero-point look-ahead distance [m]" , 
        0.800,
        0.001, 3.000
)

####################################################################################################
gen.add("controller_rotation_goal_reached_angle", 
        double_t, 0,
        "Rotation Controller: angle used to check if the goal was reached [rad]" , 
        0.0175,
        0.001, 1.000
)

gen.add("controller_rotation_kd", 
        double_t, 0,
        "Rotation Controller: derivative constant []" , 
        0.0,
        0.0, 1000.0
)

gen.add("controller_rotation_ki", 
        double_t, 0,
        "Rotation Controller: integral constant []" , 
        0.0,
        0.0, 1000.0
)

gen.add("controller_rotation_kp", 
        double_t, 0,
        "Rotation Controller: proportional constant []" , 
        2.25,
        0.0, 1000.0
)

gen.add("controller_rotation_kv", 
        double_t, 0,
        "Rotation Controller: linear velocity gain []" , 
        1.00,
        0.0, 10.00
)

gen.add("controller_rotation_kw", 
        double_t, 0,
        "Rotation Controller: angular velocity gain []" , 
        1.00,
        0.0, 10.00
)

gen.add("controller_rotation_min_angular_velocity", 
        double_t, 0,
        "Rotation Controller: minimum angular velocity during motion [rad/s]" , 
        0.0017,
        0.0001, 10.00
)

gen.add("controller_rotation_rotation_velocity", 
        double_t, 0,
        "Rotation Controller: rotation velocity [rad/s]" , 
        0.7000,
        0.001, 3.000
)

####################################################################################################
gen.add("naive_sensor_fusion_enabled", 
        bool_t, 0,
        "Enable/disable naive sensor fusion [true/false]" , 
        True
)

####################################################################################################
gen.add("sensor_aps_enabled", 
        bool_t, 0,
        "Connect/disconnect the APS sensor [true/false]" , 
        True
)

gen.add("sensor_imu_enabled", 
        bool_t, 0,
        "Connect/disconnect the IMU sensor [true/false]" , 
        True
)

gen.add("sensor_odometry_enabled", 
        bool_t, 0,
        "Connect/disconnect the ODOMETRY sensor [true/false]" , 
        True
)

####################################################################################################
gen.add("controller_stop_min_linear_velocity", 
        double_t, 0,
        "Stop Controller: minimum linear velocity allowed [m/s]" , 
        0.0050,
        0.001, 1.000
)

gen.add("controller_stop_normal_linear_deceleration", 
        double_t, 0,
        "Stop Controller: normal deceleration [m/s^2]" , 
        0.6500,
        0.001, 1.000
)

####################################################################################################
gen.add("ukf_aps_error_heading", 
        double_t, 0,
        "Heading component of the APS noise [rad]" , 
        0.001,
        0.000000001, 100.000
)

gen.add("ukf_aps_error_location", 
        double_t, 0,
        "Location (X and Y) component of the APS noise [m]" , 
        0.001,
        0.000000001, 100.000
)

gen.add("ukf_odometry_error_angular", 
        double_t, 0,
        "Angular velocity component of the odometry noise [rad/s]" , 
        0.000000001,
        0.000000001, 100.000
)

gen.add("ukf_odometry_error_linear", 
        double_t, 0,
        "Linear velocity component of the odometry noise [m/s]" , 
        0.000000001,
        0.000000001, 100.000
)

gen.add("ukf_imu_error_yaw", 
        double_t, 0,
        "Yaw component of the imu noise [rad]" , 
        0.00000001,
        0.000000001, 100.000
)

gen.add("ukf_robot_error_heading", 
        double_t, 0,
        "Heading component of the robot noise [rad]" , 
        0.00000001,
        0.000000001, 100.000
)

gen.add("ukf_robot_error_location_x", 
        double_t, 0,
        "X component of the robot noise [m]" , 
        0.1,
        0.000000001, 100.000
)

gen.add("ukf_robot_error_location_y", 
        double_t, 0,
        "Y component of the robot noise [m]" , 
        0.1,
        0.000000001, 100.000
)

gen.add("ukf_robot_error_linear", 
        double_t, 0,
        "Linear velocity component of the robot noise [m/s]" , 
        0.001,
        0.000000001, 100.000
)

gen.add("ukf_robot_error_angular", 
        double_t, 0,
        "Angular velocity component of the robot noise [rad/s]" , 
        10.0,
        0.000000001, 100.000
)

gen.add("ukf_robot_p0", 
        double_t, 0,
        "Common value for the initialization of P0" , 
        10,
        0.00001, 100000.000
)

####################################################################################################
exit(gen.generate(PACKAGE, PACKAGE, "Motion"))
