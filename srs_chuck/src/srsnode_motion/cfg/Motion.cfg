#! /usr/bin/env python

PACKAGE='srsnode_motion'

from dynamic_reconfigure.parameter_generator_catkin import *

gen = ParameterGenerator()

gen.add("adaptive_lookahead_enabled", 
        bool_t, 0,
        "Adaptive look-ahead enabled [t/f]" , 
        True
)

gen.add("aps_enabled", 
        bool_t, 0,
        "Connect/disconnect the APS sensor [true/false]" , 
        True
)

gen.add("goal_reached_distance", 
        double_t, 0,
        "Distance used to check if the goal was reached [m]" , 
        0.100,
        0.001, 1.000
)

gen.add("goal_reached_angle", 
        double_t, 0,
        "Angle used to check if the goal was reached [rad]" , 
        0.0175,
        0.001, 1.000
)

gen.add("max_angular_acceleration", 
        double_t, 0,
        "Maximum physical angular acceleration [rad/s^2]" , 
        2.618,
        0.001, 3.000
)

gen.add("max_angular_velocity", 
        double_t, 0,
        "Maximum physical angular velocity [rad/s]" , 
        9.687,
        0.001, 10.000
)

gen.add("max_linear_acceleration", 
        double_t, 0,
        "Maximum physical linear acceleration [m/s^2]" , 
        0.700,
        0.001, 1.000
)

gen.add("max_linear_velocity", 
        double_t, 0,
        "Maximum physical linear velocity [m/s]" , 
        2.600,
        0.001, 3.000
)

gen.add("max_look_ahead_distance", 
        double_t, 0,
        "Maximum motion controller look-ahead distance [m]" , 
        1.500,
        0.001, 3.000
)

gen.add("min_angular_velocity", 
        double_t, 0,
        "Minimum angular velocity during motion [rad/s]" , 
        0.0017,
        0.0001, 0.010
)

gen.add("min_linear_velocity", 
        double_t, 0,
        "Minimum linear velocity during motion [m/s]" , 
        0.1,
        0.001, 1.000
)

gen.add("min_look_ahead_distance", 
        double_t, 0,
        "Minimum motion controller look-ahead distance [m]" , 
        0.500,
        0.001, 3.000
)

gen.add("min_physical_angular_velocity", 
        double_t, 0,
        "Minimum physical angular velocity [rad/s]" , 
        0.0008,
        0.0001, 0.010
)

gen.add("min_physical_linear_velocity", 
        double_t, 0,
        "Minimum physical linear velocity [m/s]" , 
        0.005,
        0.001, 0.100
)

gen.add("ratio_crawl", 
        double_t, 0,
        "Ratio of the dynamic motion controller in crawl mode []" , 
        0.08,
        0.01, 0.99
)

gen.add("ratio_manual", 
        double_t, 0,
        "Ratio of the dynamic motion controller in manual mode []" , 
        0.40,
        0.01, 0.99
)

gen.add("travel_angular_acceleration", 
        double_t, 0,
        "Travel angular acceleration [rad/s^2]" , 
        0.489,
        0.001, 3.000
)

gen.add("travel_angular_velocity", 
        double_t, 0,
        "Travel angular velocity [rad/s]" , 
        2.007,
        0.001, 10.000
)

gen.add("travel_curve_zone_radius", 
        double_t, 0,
        "Travel reduced velocity radius during curves [m]" , 
        0.500,
        0.001, 3.000
)

gen.add("travel_curving_linear_velocity", 
        double_t, 0,
        "Travel linear velocity during curves [m/s]" , 
        0.300,
)

gen.add("travel_linear_acceleration", 
        double_t, 0,
        "Travel linear acceleration [m/s^2]" , 
        0.750,
        0.001, 1.000
)

gen.add("travel_linear_velocity", 
        double_t, 0,
        "Travel linear velocity [m/s]" , 
        1.000,
        0.001, 3.000
)

gen.add("travel_rotation_velocity", 
        double_t, 0,
        "Travel rotation velocity [rad/s]" , 
        0.524,
        0.001, 3.000
)

gen.add("zero_look_ahead_distance", 
        double_t, 0,
        "Zero-point motion controller look-ahead distance [m]" , 
        0.800,
        0.001, 3.000
)

exit(gen.generate(PACKAGE, PACKAGE, "Motion"))
