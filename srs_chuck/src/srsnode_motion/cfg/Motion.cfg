#! /usr/bin/env python

PACKAGE='srsnode_motion'

from dynamic_reconfigure.parameter_generator_catkin import *

gen = ParameterGenerator()

gen.add("aps_enabled", 
        bool_t, 0,
        "Connect/disconnect the APS sensor [true/false]" , 
        True
)

gen.add("goal_reached_distance", 
        double_t, 0,
        "Distance used to check if the goal was reached [m]" , 
        0.1
)

gen.add("max_angular_acceleration", 
        double_t, 0,
        "Maximum physical angular acceleration [rad/s^2]" , 
        2.6
)

gen.add("max_angular_velocity", 
        double_t, 0,
        "Maximum physical angular velocity [rad/s]" , 
        9.7
)

gen.add("max_linear_acceleration", 
        double_t, 0,
        "Maximum physical linear acceleration [m/s^2]" , 
        0.7
)

gen.add("max_linear_velocity", 
        double_t, 0,
        "Maximum physical linear velocity [m/s]" , 
        2.6
)

gen.add("max_look_ahead_distance", 
        double_t, 0,
        "Maximum motion controller look-ahead distance [m]" , 
        0.8
)

gen.add("min_look_ahead_distance", 
        double_t, 0,
        "Minimum motion controller look-ahead distance [m]" , 
        1.5
)

gen.add("ratio_look_ahead_distance", 
        double_t, 0,
        "Ratio of the dynamic motion controller look-ahead distance [m]" , 
        1.5
)

gen.add("travel_angular_acceleration", 
        double_t, 0,
        "Travel angular acceleration [rad/s^2]" , 
        0.5
)

gen.add("travel_angular_velocity", 
        double_t, 0,
        "Travel angular velocity [rad/s]" , 
        2.0
)

gen.add("travel_linear_acceleration", 
        double_t, 0,
        "Travel linear acceleration [m/s^2]" , 
        0.65
)

gen.add("travel_linear_velocity", 
        double_t, 0,
        "Travel linear velocity [m/s]" , 
        0.5
)

gen.add("odometry_enabled", 
        bool_t, 0,
        "Connect/disconnect the odometry sensor" , 
        True
)

exit(gen.generate(PACKAGE, PACKAGE, "Motion"))
